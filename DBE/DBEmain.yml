#Set some global vars to prevent initial division by zeros
globals:
  - id: fanspeed
    type: float
    restore_value: no
    initial_value: '1'
  - id: delta_temp
    type: float
    restore_value: no
    initial_value: '1'

# Enable logging
logger:
  level: INFO
  on_message:
    - level: ERROR
      then:
        - mqtt.publish:
            topic: '${device_name}/error'
            payload: !lambda |-
              return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;
    - level: WARN
      then:
        - mqtt.publish:
            topic: '${device_name}/warn'
            payload: !lambda |-
              return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;

one_wire:
  - platform: gpio
    pin: D1
    id: dallas_1
  
sensor:
# Sensor for Dallas 1
  - platform: dallas_temp
    address: '${dallas_1_ID}'
    name: '${device_name} Dallas 1'
    id: temp_1
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan
    on_value:
      then:
        - lambda: |-
            id(fanspeed) = (id(temp_2).state - id(temp_1).state) * 0.09;
            if (id(fanspeed) < 0) {
              id(fanspeed) = abs(id(fanspeed));
            }
        - logger.log:
            format: "fanspeed is %.1f"
            args: [ 'id(fanspeed)' ]

        - if:
            condition:
              lambda: 'return id(fanspeed) < 0.1;'
            then:
              - output.set_level:
                  id: pwm_output
                  level: 0
              - switch.turn_off:
                  id: powerswitch
              - logger.log: "Stop fans"       
            else:
              - output.set_level:
                  id: pwm_output
                  level: !lambda "return id(fanspeed);"
              - logger.log: "Below 0.7"

  - platform: pulse_counter
    pin:
      number: D5
      mode: 
        input: true
        pullup: true 
    name: '${device_name} Fan Speed'
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5

  - platform: dallas_temp
# Sensor for Dallas 2
    address: '${dallas_2_ID}'
    name: '${device_name} Dallas 2'
    id: temp_2
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan

switch:
  - platform: gpio
    pin: D0
    id: "powerswitch"
    internal: true

output:
  - platform: esp8266_pwm
    pin:
      number: D6
    frequency: 1000 Hz
    id: pwm_output
    max_power: 0.7

fan:
  - platform: speed
    output: pwm_output
    name: "${device_name} Fan"
    on_turn_on:
     - switch.turn_on: powerswitch
     - logger.log: "Fan Turned On!"
    on_turn_off:
     - switch.turn_off: powerswitch
     - logger.log: "Fan Turned Off!"
