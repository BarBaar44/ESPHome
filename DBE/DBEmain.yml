#Set some global vars to prevent initial division by zeros
globals:
   - id: previous_heating_setting_state
     type: bool
     initial_value: 'false'
#  - id: fanspeed
#    type: float
#    restore_value: no
#    initial_value: '1'
#  - id: deltatemp
#    type: float
#    restore_value: no
#    initial_value: '1'

# Enable logging
logger:
  level: DEBUG

one_wire:
  - platform: gpio
    pin: D1
    id: dallas_1
  
sensor:
# Sensor for Dallas 1
  - platform: dallas_temp
    address: '${dallas_1_ID}'
    name: '${device_name} Dallas 1'
    id: temp_1
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan
    on_value:
        then:
          - script.execute: control_fan  # Call the control_fan script when T1 changes

  - platform: pulse_counter
    pin:
      number: D5
    name: '${device_name} Fan Speed'
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5

  - platform: dallas_temp
# Sensor for Dallas 2
    address: '${dallas_2_ID}'
    name: '${device_name} Dallas 2'
    id: temp_2
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan

switch:
  - platform: gpio
    pin: D0
    id: "powerswitch"
    internal: true

output:
  - platform: esp8266_pwm
    pin:
      number: D6
    frequency: 1000 Hz
    id: pwm_output
    max_power: 90%

fan:
  - platform: speed
    output: pwm_output
    id: fancontrol
    name: "${device_name} Fan"
    on_turn_on:
     - switch.turn_on: powerswitch
     - logger.log: "Fan Turned On!"
    on_turn_off:
     - switch.turn_off: powerswitch
     - logger.log: "Fan Turned Off!"

script:
  - id: control_fan
    then:
      # Lambda to check if heating_setting changed from non-zero to 0
      - lambda: |-
          float t1 = id(temp_1).state;
          float t2 = id(temp_2).state;
          float diff = abs(t1 - t2);
          float fan_speed_value = 0.0;

          // Calculate fan speed based on the temperature difference
          fan_speed_value = max(0.0, min(100.0, (20.0 - diff) * 5.0));

          // Check if heating_setting was not 0, but is now 0
          if (id(heating_setting).state == 0 && !id(previous_heating_setting_state)) {
            // Heating setting has transitioned to 0, turn on fan at 30% speed for 2 minutes
            id(fancontrol).turn_on();
            id(pwm_output).set_level(0.3);  # Set fan speed to 30% (using pwm_output)
            delay: 120000  # Wait for 2 minutes (in milliseconds)
            // After 2 minutes, check again if heating_setting is still 0, if yes, turn off the fan
            if (id(heating_setting).state == 0) {
              id(fancontrol).turn_off();  # Turn off fan if heating_setting is still 0 after 2 minutes
            }
          }
          // When heating_setting is not 0, fan speed depends on the temperature difference
          else if (id(heating_setting).state != 0) {
            id(fancontrol).turn_on();  # Turn the fan on
            // Set fan speed based on the temperature difference (0-100)
            id(pwm_output).set_level(fan_speed_value / 100.0);  # Set the fan speed directly (0-1 range)
          }

      # Store the current state of heating_setting in previous_heating_setting_state
      - lambda: |-
          if (id(heating_setting).state == 0) {
            id(previous_heating_setting_state) = true;  // Store true if heating_setting is 0
          } else {
            id(previous_heating_setting_state) = false;  // Store false if heating_setting is not 0
          }
