#Set some global vars to prevent initial division by zeros
globals:
   - id: previous_heating_setting_state
     type: bool
     initial_value: 'false'
   - id: fan_speed_value
     type: float
     initial_value: '0.0'
#  - id: deltatemp
#    type: float
#    restore_value: no
#    initial_value: '1'

# Enable logging
logger:
  level: DEBUG

one_wire:
  - platform: gpio
    pin: D1
    id: dallas_1
  
sensor:
# Sensor for Dallas 1
  - platform: dallas_temp
    address: '${dallas_1_ID}'
    name: '${device_name} Dallas 1'
    id: temp_1
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan

  - platform: pulse_counter
    pin:
      number: D5
    name: '${device_name} Fan Speed'
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5

  - platform: dallas_temp
# Sensor for Dallas 2
    address: '${dallas_2_ID}'
    name: '${device_name} Dallas 2'
    id: temp_2
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan

switch:
  - platform: gpio
    pin: D0
    id: "powerswitch"
    internal: true

output:
  - platform: esp8266_pwm
    pin:
      number: D6
    frequency: 1000 Hz
    id: pwm_output
    max_power: 90%

fan:
  - platform: speed
    output: pwm_output
    id: fancontrol
    name: "${device_name} Fan"
    on_turn_on:
     - switch.turn_on: powerswitch
     - logger.log: "Fan Turned On!"
    on_turn_off:
     - switch.turn_off: powerswitch
     - logger.log: "Fan Turned Off!"

script:
  - id: calculate_fan_speed
    then:
      - lambda: |-
          float t1 = id(temp_1).state;
          float t2 = id(temp_2).state;
          float diff = abs(t1 - t2);
          if (diff >= 20) {
            id(fancontrol).turn_off();
          } else if (diff == 0) {
            id(fancontrol).turn_off();
          } else {
            int fan_speed_value = max(0, min(100, (20 - diff) * 5));
            id(fancontrol).turn_on();
            id(fancontrol).set_speed(fan_speed_value);
