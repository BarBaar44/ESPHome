#Set some global vars to prevent initial division by zeros
globals:
  - id: fanspeed
    type: float
    restore_value: no
    initial_value: '1'
  - id: delta_temp
    type: float
    restore_value: no
    initial_value: '1'

# Enable logging
logger:
  level: INFO
  on_message:
    - level: ERROR
      then:
        - mqtt.publish:
            topic: '${device_name}/error'
            payload: !lambda |-
              return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;
    - level: WARN
      then:
        - mqtt.publish:
            topic: '${device_name}/warn'
            payload: !lambda |-
              return "Triggered on_message with level " + to_string(level) + ", tag " + tag + " and message " + message;

one_wire:
  - platform: gpio
    pin: 18
    id: dallas_1
  - platform: gpio
    pin: 19
    id: dallas_2
  
sensor:
# Sensor for Dallas 1
  - platform: dallas_temp
    address: '${dallas_1_ID}'
    name: '${device_name} Dallas 1'
    id: temp_1
    one_wire_id: dallas_1
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan
    on_value:
      then:
        - lambda: |-
            id(fanspeed) = (id(temp_2).state - id(temp_1).state) * 0.09;
            if (id(fanspeed) < 0) {
              id(fanspeed) = abs(id(fanspeed));
            }
        - logger.log:
            format: "fanspeed is %.1f, Fanspeedmax is %.1f"
            args: [ 'id(fanspeed)', 'id(fanspeedmax).state' ]
        - if:
            condition:
              lambda: 'return id(fanspeed) > id(fanspeedmax).state;'
            then:
              - output.set_level:
                  id: ledc_speed
                  level: 0.7
              - logger.log: "Above 0.7"

        - if:
            condition:
              lambda: 'return id(fanspeed) < 0.1;'
            then:
              - output.set_level:
                  id: ledc_speed
                  level: 0
              - logger.log: "Stop fans"       
            else:
              - output.set_level:
                  id: ledc_speed
                  level: !lambda "return id(fanspeed);"
              - logger.log: "Below 0.7"

  - platform: dallas_temp
# Sensor for Dallas 2
    address: '${dallas_2_ID}'
    name: '${device_name} Dallas 2'
    id: temp_2
    one_wire_id: dallas_2
    update_interval: 30s
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    filters:
      - filter_out: nan
  
  - platform: pulse_counter
    pin: 21
    name: '${device_name} Fan Speed'
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
      
  - platform: homeassistant
    name: "Max fanspeed sensor"
    entity_id: input_number.fanspeedmax
    id: fanspeedmax
    
  - platform: template
    name: '${device_name} Speed Setting'
    id: speedsettingtemplate
    unit_of_measurement: "%"
    lambda: 'return id(fanspeed);'
    filters:
      - multiply: 1000

output:
  - platform: ledc
    pin: 22
    id: ledc_speed
    frequency: 25000
